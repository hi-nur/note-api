(self.webpackChunknote_api=self.webpackChunknote_api||[]).push([[792,121],{272:()=>{const t=document.getElementById("search-note");t.addEventListener("input",(()=>{const n=t.value.toLowerCase();document.querySelector("notes-component").filterNotes(n)}))},41:(t,n,e)=>{"use strict";const o="https://notes-api.dicoding.dev/v2";async function a(t,n){const e=await fetch(`${o}/notes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,body:n})});if(!e.ok)throw new Error("Failed to create note");return await e.json()}var i=e(465),r=e.n(i);class s extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.renderForm(),this.setupFormSubmission()}renderForm(){const t=document.createElement("form");t.innerHTML='\n      <label for="title">Judul:</label><br>\n      <input type="text" id="title" name="title" required minlength="0" maxlength="10">\n      <label for="title">Judul harus terdiri dari 0 hingga 10 karakter</label><br>\n      <label for="body">Isi:</label><br>\n      <textarea id="description" name="body" rows="4" cols="50" required minlength="0" maxlength="500"></textarea>\n      <label for="description">Isi harus terdiri dari 0 hingga 500 karakter</label><br>\n      <button type="submit" id="save-btn">Save</button>\n      <button type="button" id="back-btn">Back</button>\n      <div id="error-message" style="color: red;"></div>\n    ';const n=document.createElement("style");n.textContent='\n      /* Form styling */\n      #error-message {\n        margin-top: 10px;\n        font-size: 14px;\n      }\n      form {\n        max-width: 500px;\n        margin: 20px auto;\n        padding: 20px;\n        background-color: #121212;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-size: 16px;\n        color: #fff;\n      }\n\n      input[type="text"],\n      textarea {\n        width: calc(100% - 20px);\n        padding: 10px;\n        margin-bottom: 15px;\n        border: none;\n        border-radius: 4px;\n        background-color: #fff;\n        color: #333;\n        font-size: 16px;\n      }\n\n      textarea {\n        resize: vertical;\n        min-height: 100px;\n      }\n\n      button[type="submit"] {\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        background-color: #03b1fc;\n        color: #fff;\n        font-size: 16px;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n      }\n\n      button[type="submit"]:hover {\n        background-color: #03b1fc;\n      }\n      button[type="button"] {\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        background-color: #fc3103;\n        color: #fff;\n        font-size: 16px;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n      }\n\n      button[type="button"]:hover {\n        background-color: #bf2300;\n      }\n\n      @media screen and (max-width: 768px) {\n        form {\n          max-width: 90%;\n        }\n\n        input[type="text"],\n        textarea {\n          width: calc(100% - 20px);\n        }\n\n        button[type="submit"] {\n          font-size: 14px;\n          padding: 8px 16px;\n        }\n        button[type="button"] {\n          font-size: 14px;\n          padding: 8px 16px;\n        }\n      }\n\n      @media screen and (max-width: 480px) {\n        input[type="text"],\n        textarea {\n          font-size: 14px;\n        }\n\n        button [type="submit"] {\n          font-size: 12px;\n          padding: 6px 12px;\n        }\n        button [type="button"] {\n          font-size: 12px;\n          padding: 6px 12px;\n        }\n    ',this.shadowRoot.appendChild(n),this.shadowRoot.appendChild(t)}setupFormSubmission(){const t=this.shadowRoot.querySelector("form"),n=this.shadowRoot.getElementById("error-message"),e=t.querySelector("#title"),o=t.querySelector("#description");t.addEventListener("submit",(async i=>{if(i.preventDefault(),t.checkValidity()){const i=e.value,s=o.value;try{const e=await a(i,s);console.log("Response from API:",e),t.reset(),n.textContent="",r().fire({icon:"success",title:"Successfully",showConfirmButton:!1,timer:1500});const o=new CustomEvent("newNoteAdded",{detail:{title:i,body:s}});document.dispatchEvent(o)}catch(t){n.textContent="Gagal membuat catatan. Silakan coba lagi"}}else n.textContent="Harap isi kedua bidang dengan benar."})),e.addEventListener("input",(()=>{e.validity.valid?e.setCustomValidity(""):e.setCustomValidity("Judul harus terdiri dari 0 hingga 10 karakter")})),o.addEventListener("input",(()=>{o.validity.valid?o.setCustomValidity(""):o.setCustomValidity("Isi harus terdiri dari 0 hingga 500 karakter")}))}}customElements.define("note-form",s);class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.notes=[],this.createNotesContainer()}async connectedCallback(){await this.loadNotes(),this.setupFormListener()}createNotesContainer(){const t=document.createElement("div");t.id="notes-container",this.shadowRoot.appendChild(t)}async loadNotes(){try{const t=await async function(){const t=await fetch(`${o}/notes`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch notes");return await t.json()}();this.notes=t.data,this.filteredNotes=this.notes,this.tampilkanCatatan()}catch(t){console.error("Error loading notes:",t)}}async addNote(t,n){try{const e=(await a(t,n)).data;this.notes.push(e),this.filteredNotes=this.notes,this.tampilkanCatatan()}catch(t){console.error("Error adding note:",t)}}async deleteNoteById(t){try{await async function(t){const n=await fetch(`${o}/notes/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"}});if(!n.ok)throw new Error("Failed to delete note");return await n.json()}(t),this.notes=this.notes.filter((n=>n.id!==t)),this.filteredNotes=this.notes,this.tampilkanCatatan()}catch(t){console.error("Error deleting note:",t)}}renderNoteElement(t){const n=this.shadowRoot.getElementById("notes-container"),e=document.createElement("div");e.innerHTML=`\n      <div class="note-content">\n        <h2>${t.title}</h2>\n        <p>${t.body}</p>\n        <p>Created at: ${t.createdAt}</p>\n        <button class="delete-btn" data-id="${t.id}">Delete</button>\n      </div>\n    `,e.querySelector(".delete-btn").addEventListener("click",(t=>{const n=t.target.getAttribute("data-id");r().fire({icon:"success",title:"Deleted Successfully",showConfirmButton:!1,timer:1500}),this.deleteNoteById(n)})),n.appendChild(e)}tampilkanCatatan(){this.shadowRoot.getElementById("notes-container").innerHTML="",this.filteredNotes.forEach((t=>this.renderNoteElement(t)));const t=document.createElement("style");t.textContent="\n      #notes-container {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n        gap: 20px;\n        padding: 20px;\n      }\n      \n      .note-content {\n        display: grid;\n        grid-template-rows: auto 1fr auto auto auto;\n        gap: 10px;\n        background-color: #121212;\n        color: rgb(206, 199, 247);\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        padding: 20px;\n        box-sizing: border-box;\n        position: relative;\n      }\n\n      .note-content h2 {\n        grid-row: 1;\n      }\n\n      .note-content p {\n        grid-row: span 1;\n      }\n\n      .delete-btn {\n        grid-row: 5;\n        width:100%;\n        background-color: #f44336;\n        color: white;\n        border: none;\n        padding: 10px 10px;\n        cursor: pointer;\n        border-radius: 4px;\n        font-size: 14px;\n        margin-top: 10px;\n      }\n\n      @media screen and (max-width: 768px) {\n        #notes-container {\n          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        }\n      }\n\n      @media screen and (max-width: 480px) {\n        #notes-container {\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        }\n      }\n    ",this.shadowRoot.appendChild(t)}setupFormListener(){document.addEventListener("newNoteAdded",(t=>{const{title:n,body:e}=t.detail;this.addNote(n,e)}))}}customElements.define("notes-component",d),e(272),e(543),e(994)},994:(t,n,e)=>{"use strict";e.r(n),e(336)}},t=>{t.O(0,[336,234],(()=>t(t.s=41))),t.O()}]);